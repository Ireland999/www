<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>table</title>
</head>
<style>
    ::-webkit-scrollbar{
        background-color: rgb(205,205,205);
        width: 5px;
        height: 5px;
        background-clip: padding-box;
    }
    ::-webkit-scrollbar-button{
        background-color: #ddd;
    }
    ::-webkit-scrollbar-thumb {
        background-color: rgba(0,0,0,.25);
        border-radius: 5px;
    }
    ::-webkit-scrollbar-corner {
        background-color: rgba(0,0,0,.25);
    }
    #tableCont{
        position: relative;
        margin: 20px auto;
        height: 400px;
        width: 400px;
        overflow: auto;
    }
</style>
<body>
    <div id="tableCont"></div>
</body>
<script>
(function(){
    //生成的cell数据为{'0-0':{},'0-1':{}}类型，row+col为key
    const getType = function(params){
        let type = Object.prototype.toString.apply(params);
        return type.match(/^\[(\w+)\s(\w+)\]$/)[2];
    },
    setDefault = function(_params,def){
        let [type,_type,echo,params] = [getType(_params),getType(def),'',''];
        if(type != _type){
            return def;
        }
        switch(type){
            case 'Array':
                params = [];
                _params.forEach(item=>{
                    if(item != undefined){
                        params.push(item);
                    }
                })
                echo = [...def,...params];
            break;
            case 'Object':
                params = [];
                Object.keys(_params).forEach(item=>{
                    if(_params[item] != undefined){
                        params[item] = _params[item];
                    }
                });
                echo = {...def,...params};
            break;
            default:
                echo = (type==='Undefined'?def:_params);
        }
        return echo;
    },
    setAttr = function(dom,params){
        Object.keys(params).forEach(item=>{
            dom.setAttribute(item,params[item]);
        })
    },
    getAttr = function(dom,params){
        let type = getType(params),echo={};
        if(type === 'String'){
            return dom.setAttribute(params);
        }else if(type === 'Array'){
            params.forEach(item=>{
                echo[item] = dom.setAttribute(item);
            })
            return echo;
        }
        
    },
    getOffset = function (curEle){
      var totalLeft = null,totalTop = null,par = curEle.offsetParent;
      totalLeft+=curEle.offsetLeft;
      totalTop+=curEle.offsetTop;
      while(par){
        if(navigator.userAgent.indexOf("MSIE 8.0")===-1){
          totalLeft+=par.clientLeft;
          totalTop+=par.clientTop
        } 
        totalLeft+=par.offsetLeft;
        totalTop+=par.offsetTop
        par = par.offsetParent;
      }
      return {left:totalLeft,top:totalTop};
    },
    setStyle = function(dom,params){
        Object.keys(params).forEach(item=>{
            dom.style[item] = params[item];
        })
    },
    createCanvas = function(params){
        let p = setDefault(params,{
            id: 'canvas'+Date.now(),
            width: 50,
            height: 50
        });
        var canvas = document.createElement('canvas');
        setAttr(canvas,{
            width: p.width,
            height: p.height,
            id: p.id
        });
        setStyle(canvas,{
            width: p.width,
            height: p.height
        })
        return canvas;
    },
    createRect = function(ctx,_box,_style){
        let box = setDefault(_box,{x:0,y:0,width:20,height:20});
        ctx.save();
        ctx.strokeStyle = '#7d7d7d';
        Object.keys(_style).forEach(item=>{
            ctx[item] = _style[item]
        });
        ctx.strokeRect(box.x,box.y,box.width-2,box.height-2);
        ctx.restore();
    },
    clearRect = function(ctx,_box){
        ctx.clearRect(_box.x-1,_box.y-1,_box.width,_box.height);
    },
    createCell = function(_params){
        let params = setDefault(_params,{
            id:'',
            x:0,
            y:0,
            width:120,
            height:40,
            value:'',
            type:'String',
            style:{},
            colspan:1,
            rowspan:1,
            show:true
        });
        return params;
    },
    checkHit = function(point,data){
        var keyArr = Object.keys(data),
            {x:px,y:py} = point,
            echo = '';
        for(let i = 0;i < keyArr.length;i++){
            let {x,y,width,height} = data[keyArr[i]];
            if(px > x && px < x+width && py > y && py < y+height){
                echo = keyArr[i];
                break;
            }
        }
        return echo;
    },
    rowAndColSpan = function(data,{cell,rowspan,colspan}){
        const [nowRow,nowCol] = cell.split('-');
        let height = width = 0;
        let rowspanArr = Array(+rowspan).fill(1),
            colspanArr = Array(+colspan).fill(1);
        let couldSpan = true;
        //计算高度和宽度
        rowspanArr.forEach((value,item)=>{
            let cell = data[+nowRow+item+'-'+nowCol];
            if(cell.rowspan!=1 || cell.colspan!=1){
                couldSpan = false;
            }
            cell.show?height+=cell.height:'';
        });
        colspanArr.forEach((value,item)=>{
            let cell = data[+nowRow+'-'+(+nowCol+item)];
            if(cell.rowspan!=1 || cell.colspan!=1){
                couldSpan = false;
            }
            cell.show?width+=cell.width:'';
        });
        if(couldSpan){
            //更改数据cell的属性
            rowspanArr.forEach((value,r)=>{
                colspanArr.forEach((value,c)=>{
                    data[+nowRow+r+'-'+(+nowCol+c)].show = false;
                });
            });
            data[cell].show = true;
            data[cell].width = width;
            data[cell].colspan = colspan;
            data[cell].rowspan = rowspan;
            data[cell].height = height;
        }
        return couldSpan;
    },
    draw = function(ctx,data){
        Object.keys(data).forEach(item=>{
            let cell = data[item];
            if(cell.show){
                createRect(ctx,cell,cell.style);
            }
        })
    },
    computedValueSize = function(cell){
        const canvsToDiv = {
            'textAlign':'text-align',
            'strokeStyle':'color',
            'fillStyle':'background-color'
        };
        var div = document.getElementById('justForTableCell'),style={};
        div = div || document.createElement("div");  
        Object.keys(cell.style).forEach(item=>{
            if(item in canvsToDiv){
                style[canvsToDiv[item]] = cell.style[item];
            }else{
                style[item] = cell.style[item];
            }
        });
        setStyle(div,{
            position: 'absolute',
            top: '',
            left: '',
            ...style
        });
        div.innerHTML = cell.value;
        return {width:div.offsetWidth, height:div.offsetHeight};
    }, 
    computedTableSize = function(data){
        let i = 0,height = width = col =row = 0;
        while(data[i+'-0'] || data['0-'+i]){
            let cellR = data[i+'-0'],
                cellC = data['0-'+i];
            cellR?height+=cellR.height:row=i;
            cellC?width+=cellC.width:col=i;
            i++;
        }
        return {width,height,row,col};
    },
    computedCoverCells = function(_startCell,_endCell){
        let startKeyArr = _startCell.id.split('-'),
            endKeyArr = _endCell.id.split('-');
        let startR,endR,startC,endC,offset,height = 0,width = 0;
        let startCell = {row:startKeyArr[0],col:startKeyArr[1]},
            endCell = {row:endKeyArr[0],col:endKeyArr[1]};
        //获取坐标点的最大值和最小值
        if(startCell.col - endCell.col > 0){
            startC = endCell.col;
            endC = startCell.col;
        }else{
            startC = startCell.col;
            endC = endCell.col;
        }
        if(startCell.row - endCell.row > 0){
            startR = endCell.row;
            endR = startCell.row;
        }else{
            startR = startCell.row;
            endR = endCell.row;
        }
        //生成左上角的点和跨行数以及跨列数colspan做一下兼容，当向左滑动时endC-1了，防止出现0的存在
        return {cell:startR+'-'+startC,row:startR,col:startC,rowspan:endR-startR+1,colspan:endC-startC+1};
    };
    //构造函数
    /* 
        params:{
            id:'盒子的id', 必填项
            rowNum:'多少行数',
            colNum:'多少列数',
            width:'小cell的宽',
            height:'小cell的高',
            topHeight:'上栏的高',
            leftWidth:'左栏的宽',
        }
     */
    window.ExcelMaker = function(_params){
        var box = document.getElementById(_params.id);
        this.scale = 2;
        this.outBox = document.createElement('div');
        this.params ={rowNum:10,colNum:10,width:60,height:30,topHeight:30,leftWidth:50,..._params};
        if(!box)return;
        this.boxWidth = box.clientHeight;
        this.boxHeight = box.clientWidth;
        this.shadowCanvas = ''; 
        this.topCanvas = '';
        this.leftCanvas = '';
        this.tableCanvas = '';
        this.shadowCtx = '' 
        this.topCtx = '';
        this.leftCtx = '';
        this.tableCtx = '';
        this.topData = {};
        this.leftData = {};
        this.tableData = {};
        this.tableWidth = '';
        this.tableHeight = '';
        this.scroll = {top:0,left:0};
        if(this.params.colNum > 26){
            this.params.colNum = 26;
        }
        box.appendChild(this.outBox);
        this.init();
    }
    ExcelMaker.prototype = {
        init(){
            setStyle(this.outBox,{
                position:'relative',
                width:'100%',
                height:'100%',
                overflow:'hidden'
            });
            this.dealScale();
            this.setData();
            this.setTopLeft();
            this.setCanvas();
            this.draw();
            this.setScrollTab();
            this.setTouchEvent();
        },
        draw(type){
            let {topCtx,leftCtx,tableCtx} = this;
            let {topHeight,leftWidth} = this.params,{tableWidth,tableHeight} = this;
            switch(type){
                case 'top':
                    draw(topCtx,this.topData);
                    break;
                case 'left':
                    draw(leftCtx,this.leftData);
                    break;
                case 'table':
                    draw(tableCtx,this.tableData);
                    break;
                default:
                    draw(topCtx,this.topData);
                    draw(leftCtx,this.leftData);
                    draw(tableCtx,this.tableData);
                    //给导航栏添加一个外边框
                    topCtx.save();
                    leftCtx.save();
                    topCtx.strokeRect(0,1,tableWidth-2,topHeight-2);
                    leftCtx.strokeRect(1,0,leftWidth-2,tableHeight-2);
                    topCtx.restore();
                    leftCtx.restore();
            }
        },
        setCanvas(){
            const id = this.params.id+'-',scale = this.scale;
            let tableSize = computedTableSize(this.tableData);
            let {topHeight,leftWidth} = this.params;
            let params = {
                id:'',
                width:tableSize.width,
                height:tableSize.height
            };
            let paramsShadow = {
                id:'',
                width:this.boxWidth,
                height:this.boxHeight
            }
            //设置table的宽高
            this.tableWidth = tableSize.width;
            this.tableHeight = tableSize.height;

            this.shadowCanvas = createCanvas({...paramsShadow,id:id+'shadow'});
            this.topCanvas = createCanvas({...params,id:id+'top'});
            this.leftCanvas = createCanvas({...params,id:id+'left'});
            this.tableCanvas = createCanvas({...params,id:id+'table'});
            //设置style
            let styleParams = {
                position:'absolute',
                top:0,
                left:0,
                'background-color':'#fff',
                'z-index':'10',
                width:params.width/scale+'px',
                height:params.height/scale+'px'
            },
            shadowStyleParams = {
                position:'absolute',
                top:0,
                left:0,
                'background-color':'transparent',
                width:paramsShadow.width+'px',
                height:paramsShadow.height+'px',
                'z-index':'110'
            },
            shadowAttrParams = {
                width:paramsShadow.width,
                height:paramsShadow.height
            },
            attrParams = {
                width:params.width,
                height:params.height
            };
            setStyle(this.shadowCanvas,shadowStyleParams);
            setStyle(this.topCanvas,{...styleParams,height:topHeight/scale+'px'});
            setStyle(this.leftCanvas,{...styleParams,width:leftWidth/scale+'px'});
            setStyle(this.tableCanvas,{...styleParams,'z-index':'1','background-color':'transparent'});
            //设置属性
            setAttr(this.shadowCanvas,shadowAttrParams);
            setAttr(this.topCanvas,{...attrParams,height:topHeight});
            setAttr(this.leftCanvas,{...attrParams,width:leftWidth});
            setAttr(this.tableCanvas,attrParams);
            //添加到out里面
            this.outBox.appendChild(this.shadowCanvas);
            this.outBox.appendChild(this.topCanvas);
            this.outBox.appendChild(this.leftCanvas);
            this.outBox.appendChild(this.tableCanvas);
            //获取画板
            this.shadowCtx = this.shadowCanvas.getContext("2d");
            this.topCtx = this.topCanvas.getContext("2d");
            this.leftCtx = this.leftCanvas.getContext("2d");
            this.tableCtx = this.tableCanvas.getContext("2d");
            
            //设置原点偏移量
            this.topCtx.translate(leftWidth,0);
            this.leftCtx.translate(0,topHeight);
            this.tableCtx.translate(leftWidth,topHeight);
        },
        setData(){
            const that = this;
            const code = 'ABCDEFJHIJKLMNOPQRSTUVWXYZ';
        
            let {rowNum,colNum,width,height,topHeight,leftWidth} = that.params;
            let rowNumArr = Array(+rowNum).fill(1),
                colNumArr = Array(+colNum).fill(1);
            let paramsCell = {x:0,y:0,width:width,height:height};
            
            rowNumArr.forEach((value,r)=>{
                that.leftData[r+'-0'] = createCell({...paramsCell,width:leftWidth,id:r+'-0'});
                colNumArr.forEach((value,c)=>{
                    let key = r+'-'+c;
                    that.tableData[key] = createCell({...paramsCell,id:key});
                    if(r === 0){
                        that.topData['0-'+c] = createCell({...paramsCell,height:topHeight,id:'0-'+c});
                    }
                    paramsCell.x += (that.tableData[key].width);
                });
                paramsCell.y += (that.tableData[r+'-0'].height);
                paramsCell.x = 0;
            })
        },
        setTopLeft(){
            let i = document.createElement('i');
            let {topHeight,leftWidth} = this.params,scale = this.scale;
            setStyle(i,{
                position:'absolute',
                top:'0',
                left:'0',
                width:leftWidth/scale-2+'px',
                height:topHeight/scale-2+'px',
                'text-align':'center',
                'line-height':topHeight/scale+'px',
                'background-color':'#fff',
                'border':'1px solid #7d7d7d',
                'z-index':'100'
            });
            i.innerHTML = 'demo';
            this.outBox.appendChild(i);
        },
        dealScale(){
            const scale = this.scale;
            let {width,height,topHeight,leftWidth} = this.params;
            //对params的宽度和高度处理
            this.params.topHeight =  topHeight*scale;
            this.params.leftWidth =  leftWidth*scale;
            this.params.width =  width*scale;
            this.params.height =  height*scale;
        },
        setTouchEvent(){
            const that = this;
            let {shadowCanvas,params,scroll,tableData,tableCtx,scale} = this;
            let offset = getOffset(shadowCanvas);
            let lastCellKey = '';//当前滑动的时候保留的key
            let firstCheckCell = null,topLeftCell=null,checkCellsArr = [],couldMove = false,ismoving = false;
            shadowCanvas.addEventListener('mousedown',function(event){
                let {pageX,pageY} = event;
                let realPoint = {x:0,y:0};
                pageX -= offset.left;
                pageY -= offset.top;
                //console.log('点击坐标点','('+pageX+','+pageY+')');
                realPoint.x = (scroll.left+pageX)*scale-params.leftWidth;
                realPoint.y = (scroll.top+pageY)*scale-params.topHeight;
                let cellKey = checkHit(realPoint,tableData);
                //console.log(cellKey)
                if(event.button == '2'){
                    that.rowAndColSpan();
                    console.log('点击了右键')
                    return;
                }
                //还原上次的框
                that.shadowCtx.clearRect(0,0,that.boxWidth,that.boxHeight);
                firstCheckCell?(clearRect(tableCtx,firstCheckCell),createRect(tableCtx,firstCheckCell,firstCheckCell.style)):'';
                if(!cellKey)return;
                let cell = tableData[cellKey],
                    cellCopy = JSON.parse(JSON.stringify(cell));
                firstCheckCell = cellCopy;
                createRect(tableCtx,cellCopy,{...cellCopy.style,strokeStyle:'blue'});
                couldMove = true;
                ismoving = false;
                checkCellsArr = [];
                that.topLeftpoint = null;
            });
            shadowCanvas.addEventListener('mousemove',function(event){
                if(!couldMove)return;
                let {pageX,pageY} = event;
                let realPoint = {x:0,y:0};
                pageX -= offset.left;
                pageY -= offset.top;
                //console.log('点击坐标点','('+pageX+','+pageY+')');
                realPoint.x = (scroll.left+pageX)*scale-params.leftWidth;
                realPoint.y = (scroll.top+pageY)*scale-params.topHeight;
                let cellKey = checkHit(realPoint,tableData);
                if(lastCellKey == cellKey)return;
                
                let topLeftpoint = computedCoverCells(firstCheckCell,that.tableData[cellKey]);
                //console.log(topLeftpoint)
                checkCellsArr = [];
                //计算当前选择框的高度和宽度
                let topLeftCell = that.tableData[topLeftpoint.row+'-'+topLeftpoint.col];
                let checkedCell = {
                    x:topLeftCell.x,
                    y:topLeftCell.y,
                    width:0,
                    height:0
                };
                for(let r = 0;r < topLeftpoint.rowspan;r++){
                    checkedCell.height += that.tableData[(+topLeftpoint.row+r)+'-0'].height;
                    for(let c = 0;c < topLeftpoint.colspan;c++){
                        let key = (+topLeftpoint.row+r)+'-'+(+topLeftpoint.col+c);
                        r==0?(checkedCell.width += that.tableData[topLeftpoint.row+'-'+(+topLeftpoint.col+c)].width):'';
                        if(tableData[key].show){
                            checkCellsArr.push(key);
                        }
                    }
                }
                console.log(checkedCell)
                //清除当前区域、画出蓝色格子
                !ismoving?(clearRect(tableCtx,firstCheckCell),createRect(tableCtx,firstCheckCell,firstCheckCell.style)):'';
                that.shadowCtx.clearRect(0,0,that.boxWidth,that.boxHeight);
                createRect(that.shadowCtx,{
                    width:checkedCell.width/scale,
                    height:checkedCell.height/scale,
                    x:(checkedCell.x-scroll.left+params.leftWidth)/scale,
                    y:(checkedCell.y-scroll.top+params.topHeight)/scale,
                },{strokeStyle:'blue'});
                //赋值
                ismoving = true;
                lastCellKey == cellKey;
                that.topLeftpoint = topLeftpoint;
            });
            shadowCanvas.addEventListener('mouseup',function(){
                couldMove = false;
                ismoving = false;
            })
        },
        rowAndColSpan(){
            if(!this.topLeftpoint)return;
            //处理数据
            let couldSpan = rowAndColSpan(this.tableData,this.topLeftpoint);
            if(!couldSpan)return;
            //获取左上角点的数据
            let topLeftCell = this.tableData[this.topLeftpoint.cell];
            let {x,y,width,height} = topLeftCell;
            this.tableCtx.clearRect(x,y,width,height);
            createRect(this.tableCtx,topLeftCell,topLeftCell.style);
        },
        setScrollTab(){
            let {scroll,scale,tableHeight,tableWidth} = this,that=this;
            let right = document.createElement('div'),
                bottom = document.createElement('div');
            let spanR = document.createElement('span'),
                spanB = document.createElement('span');
            setStyle(right,{
                position:'absolute',
                right:'0px',
                top:'0',
                height:this.boxHeight+'px',
                width:'10px',
                overflow:'auto',
                'z-index':'1000'
            });
            setStyle(spanR,{
                display:'block',
                width:'1px',
                height: tableHeight/scale+'px'
            });
            setStyle(bottom,{
                position:'absolute',
                left:'0',
                bottom:'0px',
                height:'10px',
                width:this.boxWidth+'px',
                overflow:'auto',
                'z-index':'1000'
            });
            setStyle(spanB,{
                display:'block',
                width:tableWidth/scale+'px',
                height: '1px'
            });
            right.appendChild(spanR);
            bottom.appendChild(spanB);
            this.outBox.appendChild(right);
            this.outBox.appendChild(bottom);
            //添加滚动事件
            right.onscroll = function(){
                let scrollTop = this.scrollTop;
                scroll.top = scrollTop;
                that.leftCanvas.style.top = -scrollTop+'px';
                that.tableCanvas.style.top = -scrollTop+'px';
                //只要滚动就清除画布
                that.shadowCtx.clearRect(0,0,that.boxWidth,that.boxHeight);
            };
            bottom.onscroll = function(){
                let scrollLeft = this.scrollLeft;
                scroll.left = scrollLeft;
                that.topCanvas.style.left = -scrollLeft+'px';
                that.tableCanvas.style.left = -scrollLeft+'px';
                that.shadowCtx.clearRect(0,0,that.boxWidth,that.boxHeight);
                //只要滚动就清除画布
                that.shadowCtx.clearRect(0,0,that.boxWidth,that.boxHeight);
            };
        }
    }
})();
</script>
<script>
    var params = {
        id:'tableCont',
        width:60,
        height:30,
        rowNum:50,//行
        colNum:20//列
    };
    new ExcelMaker(params)
</script>
</html>
